{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","loadAll","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","scrollListener","scrollY","addEventListener","removeEventListener","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82f539f8.chunk.js","sourcesContent":["const API_KEY = 'ff4c66e0ee450e2786aeac610a806da3';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n/* \r\n-originais da netflix\r\n-recomendados\r\n-Em alta (top rated)\r\n-ação\r\n-comédia\r\n-terror\r\n-romance\r\n-documentários\r\n\r\n*/\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [ {\r\n            slug: 'originals',\r\n            title: 'Originais do Netflix',\r\n            items: await basicFetch (`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n        },\r\n        {\r\n            slug: 'trending',\r\n            title: 'Recomendados para você',\r\n            items: await basicFetch (`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n        },\r\n\r\n        {\r\n            slug: 'toprated',\r\n            title: 'Em Alta',\r\n            items: await basicFetch (`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n        },\r\n\r\n        {\r\n            slug: 'action',\r\n            title: 'Ação',\r\n            items: await basicFetch (`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n        },\r\n\r\n        {\r\n            slug: 'comedy',\r\n            title: 'Comédia',\r\n            items: await basicFetch (`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n        },\r\n\r\n        {\r\n            slug: 'horror',\r\n            title: 'Terror',\r\n            items: await basicFetch (`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n        },\r\n\r\n        {\r\n            slug: 'romance',\r\n            title: 'Romance',\r\n            items: await basicFetch (`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n        },\r\n\r\n        {\r\n            slug: 'documentary',\r\n            title: 'Documentários',\r\n            items: await basicFetch (`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n        }\r\n\r\n        ];\r\n     },\r\n\r\n     getMovieInfo: async (movieId, type) => {\r\n         let info = {};\r\n\r\n         if(movieId) {\r\n             switch (type){\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n\r\n                default: \r\n                    info=null;\r\n                break;\r\n             }\r\n         }\r\n\r\n         return info;\r\n     }\r\n}\r\n","import React, {useState} from 'react';\r\nimport './MovieRow.css'\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({title, items}) => { \r\n\r\n    const [scrollX, setScrollX] = useState (0);\r\n\r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth / 2);\r\n        if (x > 0){\r\n            x = 0;\r\n        }\r\n\r\n        setScrollX(x);\r\n    }\r\n\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth / 2);\r\n        let listW = items.results.length * 150;\r\n        if ((window.innerWidth - listW) > x) {\r\n            x = (window.innerWidth - listW) - 60;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n        \r\n\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n                <NavigateBeforeIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                <NavigateNextIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n                {items.results.length > 0 && items.results.map((item, key)=>(\r\n                    <div key={key} className=\"movieRow--item\">\r\n                        <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={items.original_title}/>\r\n                    </div>\r\n                ))}\r\n                \r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n                )\r\n}","import React from 'react';\r\nimport './FeaturedMovie.css'\r\n\r\n\r\n\r\nexport default({item}) => {\r\n\r\n    let firstDate = new Date(item.first_air_date);\r\n    let genres = [];\r\n    for(let i in item.genres){\r\n        genres.push(item.genres[i].name);\r\n    }\r\n\r\n    let description = item.overview;\r\n    if (description.length > 200) {\r\n        description = description.substring(0, 200 + '...')\r\n    }\r\n\r\n    return (\r\n        <section className=\"featured\" style= {{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`,\r\n        }}>\r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">{item.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n                    </div>\r\n                    <div className=\"featured--description\">{item.overview}</div>\r\n                    <div className=\"featured--buttons\">\r\n                        <a href={`/watch/${item.id}`}className=\"featured--watchbutton\">► Assistir</a>\r\n                        <a href={`/list/add/${item.id}`}className=\"featured--mylistbutton\">+ Minha lista</a>\r\n                    </div>\r\n                    <div className=\"featured--genres\"><strong>Gêneros:</strong> {genres.join (', ')}</div>\r\n                </div>\r\n            </div>\r\n\r\n        </section>\r\n\r\n    );\r\n}","import React from 'react'\r\nimport './Header.css';\r\n\r\nexport default ({black}) => {\r\n        return (\r\n            <header className={black ? 'black' : ''}>\r\n                 <div className=\"header--logo\">\r\n                     <a href=\"/\">\r\n                         <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix\"></img>\r\n                     </a>\r\n                 </div>\r\n\r\n                 <div className=\"header--user\">\r\n                     <a href=\"/\">\r\n                         <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"Usuário\"></img>\r\n                     </a>\r\n                 </div>\r\n            </header>\r\n        )\r\n    }\r\n\r\n","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\n\nexport default () => {\n\n  const [movieList, setMovieList]= useState([]);\n  const [featuredData, setFeaturedData]= useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      //pegando a lista total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n          //Pegando o Featured\n\n    let originals = list.filter(i => i.slug === 'originals');\n    let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n    let chosen = originals[0].items.results[randomChosen];\n    let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n    setFeaturedData(chosenInfo);\n\n    }\n      loadAll();\n  }, []);\n\n  useEffect(()=>{\n    const scrollListener = () => {\n        if(window.scrollY > 10) {\n          setBlackHeader(true);\n        } else {\n          setBlackHeader(false)\n        }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  })\n\n  return (\n  <div className= \"page\">\n\n    <Header black={blackHeader} />\n    {featuredData &&\n    <FeaturedMovie item={featuredData} /> }\n\n    <section className=\"lists\">\n        {movieList.map((item, key) =>(\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n    </section>\n\n    <footer>\n      Feito com <span role=\"img\" aria-label=\"coração\">❤️</span> por <a href=\"www.linkedin.com/in/overnicius\">Vinicius Silva</a><br></br>\n      Direitos de imagem para a Netflix<br></br>\n      Dados pegos do site Themoviedb.org\n    </footer>\n    \n    {movieList.length <= 0 &&\n    <div className=\"loading\">\n      <img src=\"https://www.metageek.com/img/buffering-800px.gif\" alt=\"loading\"></img>\n    </div> }\n\n  </div>\n  )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}